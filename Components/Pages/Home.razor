@page "/"
@rendermode InteractiveServer
@using BlazorApp.Models
@using BlazorApp.Services
@using myapp.Components.Shared
@inject IProductService ProductService

<PageTitle>Productos</PageTitle>

<div class="products-header">
    <h2>Products</h2>
</div>

@if (!string.IsNullOrEmpty(error))
{
    <Alert Message="@error" Type="danger" OnDismiss="@(() => error = null)" />
}

@if (products == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td><img src="@product.Imagen" alt="@product.Nombre" class="product-image" /></td>
                        <td>@product.Nombre</td>
                        <td>@product.Descripcion</td>
                        <td>$@product.Precio</td>
                        <td>@product.Stock</td>
                        <td>@product.Categoria</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Product>? products;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            error = null;
            var productList = await ProductService.GetProducts();
            products = productList.ToList();
        }
        catch (Exception ex)
        {
            error = ex.Message;
            products = new List<Product>();
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }
}